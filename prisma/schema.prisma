generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?      @unique
  passwordHash  String
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  designs       Design[]
  collections   Collection[]
  favorites     Favorite[]

  @@map(name: "users")
}

model Design {
  id          String       @default(cuid()) @id
  userId      String
  imageUrl    String
  description String?
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  user        User         @relation(fields: [userId], references: [id])
  ideas       DesignsIdeas[]
  styles      DesignsStyles[]
  favorites   Favorite[]
  collections CollectionsDesign[]

  @@map(name: "designs")
}

model Collection {
  id        String               @default(cuid()) @id
  userId    String
  name      String
  createdAt DateTime             @default(now()) @map(name: "created_at")
  updatedAt DateTime             @updatedAt @map(name: "updated_at")
  user      User                 @relation(fields: [userId], references: [id])
  designs   CollectionsDesign[]

  @@map(name: "collections")
}

model Favorite {
  id        String     @default(cuid()) @id
  userId    String
  designId  String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  user      User       @relation(fields: [userId], references: [id])
  design    Design     @relation(fields: [designId], references: [id])

  @@map(name: "favorites")
}

model Idea {
  id          String       @default(cuid()) @id
  name        String       @unique
  slug        String      @unique
  image       String?
  description String?
  designs     DesignsIdeas[]
  meaning     Meaning?

  @@map(name: "ideas")
}

model Style {
  id          String       @default(cuid()) @id
  name        String       @unique
  slug        String
  description String?
  image       String?
  designs     DesignsStyles[]

  @@map(name: "styles")
}

model DesignsIdeas {
  id        String     @default(cuid()) @id
  designId  String
  ideaId    String
  design    Design     @relation(fields: [designId], references: [id])
  idea      Idea       @relation(fields: [ideaId], references: [id])

  @@map(name: "designs_ideas")
}

model DesignsStyles {
  id        String     @default(cuid()) @id
  designId  String
  styleId   String
  design    Design     @relation(fields: [designId], references: [id])
  style     Style      @relation(fields: [styleId], references: [id])

  @@map(name: "designs_styles")
}

model CollectionsDesign {
  id            String     @default(cuid()) @id
  collectionId  String
  designId      String
  collection    Collection @relation(fields: [collectionId], references: [id])
  design        Design     @relation(fields: [designId], references: [id])

  @@map(name: "collections_designs")
}

model Meaning {
  id          String     @default(cuid()) @id
  ideaId      String     @unique
  name        String
  slug        String
  text        String?
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
  idea        Idea       @relation(fields: [ideaId], references: [id])

  @@map(name: "meanings")
}
